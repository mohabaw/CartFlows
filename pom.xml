<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>CucumberJava</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <cucumber-java.version>7.20.1</cucumber-java.version>
        <cucumber-core.version>7.20.1</cucumber-core.version>
        <selenium-java.version>4.27.0</selenium-java.version>
        <testNG.version>7.10.2</testNG.version>
        <cucumber-testng.version>7.20.1</cucumber-testng.version>
        <maven-surefire-plugin.version>3.5.2</maven-surefire-plugin.version>
    </properties>
    <dependencies>
        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>${cucumber-java.version}</version>
            <!-- Provides core support for writing Cucumber step definitions in Java -->
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-core -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-core</artifactId>
            <version>${cucumber-core.version}</version>
            <!-- OPTIONAL: cucumber-java or cucumber-testng may pull cucumber-core as a transitive
            dependency But explicitly including cucumber-core ensures that the right version is
            used and that no critical components are missed. -->
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium-java.version}</version>
            <!-- Selenium WebDriver for browser automation -->
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.testng/testng -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testNG.version}</version>
            <scope>test</scope>
            <!-- Provides TestNG features like @DataProvider, parallel execution, and test management -->
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>${cucumber-testng.version}</version>
            <!-- Integrates Cucumber with TestNG, enabling annotations like @DataProvider -->
        </dependency>


        <!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>5.9.2</version>
        </dependency>

        <!-- Required dependencies for log4j -->
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.24.3</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.24.3</version>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <!-- Maven-surefire-plugin: added to manage which classes will be executed through Jenkins:
              Surefire is used by default by Jenkins and it looks for any class including "Test"
              in its name, so tests could be run twice (experienced !!!!)-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <includes>
                        <include>runners/*.class</include>
                        <testFailureIgnore>true</testFailureIgnore>
                    </includes>
                    <excludes>
                        <exclude>**/*Test*.class</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>